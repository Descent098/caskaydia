import type { NextPage } from "next";
import Head from "next/head";

import { useSession, signIn, signOut } from "next-auth/react";
import { useEffect, useState } from "react";
import Analysis from "../../components/Analysis/Analysis";
import { getJSON, postJSON } from "../../utils/networkingutils";
import { useRouter } from "next/router";
import { IMatch } from "../../models/Match";
import CircularLoader from "../../components/CircularLoader";

const enum STATES {
  INIT,
  ANALYZE,
}

function fetchPGN() {
  return "1. e3 c5 2. Nf3 Nc6 3. Bb5 Qc7 4. Bxc6 Qxc6 5. Nc3";
}

const Home: NextPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const { data: session } = useSession();

  const [match, setMatch] = useState<IMatch>();
  const [isLoaded, setLoaded] = useState<boolean>(false);

  if (!isLoaded) {
    try {
      setLoaded(true);
      getJSON(`/api/match/${id}`).then((response) => {
        if (response.ok) {
          response.json().then((data) => {
            // save the data as match data!
            setMatch(data as IMatch);

          });
        } else {
          throw new Error();
        }
      });
    } catch (err) {
      console.log("match id does not exist in database.");
    }
  }

  // check if the user is signed in. if they are, show them the matchmaking component

  const signin = session ? (
    <div>
      Signed in as {session.user?.email}
      <br />
      <button onClick={() => signOut()}>Sign out</button>
    </div>
  ) : (
    <div>
      Not signed in.
      <br />
      <button onClick={() => signIn()}>Sign in</button>
    </div>
  );

  // const moves_cmpnt = state.moves?.map((str, i) => <li key={i}>{str}</li>)

  // const handleClose = () => {
  //     setState({...state, puzzle_state: PUZZLE_STATES.PUZZLE_INIT});
  // };

  return (
    <div className="">
      <div className="">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {signin}

        {/* <Modal show={state.puzzle_state === PUZZLE_STATES.PUZZLE_END} onHide={handleClose}>
                <Modal.Header closeButton>
                <Modal.Title>Puzzle complete!</Modal.Title>
                </Modal.Header>
                <Modal.Body>You've solved the puzzle! Dismiss to continue to another.</Modal.Body>
                <Modal.Footer>
                <Button variant="primary" onClick={handleClose}>
                    Close
                </Button>
                </Modal.Footer>
            </Modal> */}

        <main className="container d-flex flex-col justify-content-center align-items-center">
          {/* <div>Match: {state.matchId}</div> */}

          <h1 className="display-2">Post Game Analysis</h1>

          <div className="text-center">
            <p>
              Revisit a game you've played and see what Stockfish thinks of your play!
            </p>
          </div>
          {/* <p>game pgn: {fetchPGN()}</p> */}

          <div className="w-100 card my-3">
            <div className="card-body d-flex flex-col justify-content-center align-items-center">
              {match && <Analysis match_pgn={match.pgn} canReset={false} />}
              {!match && <CircularLoader />}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

/**
 * Protect this path the same way we protect other pages. Cannot use getStaticProps, since analysis by game ID cannot be statically compiled (relies on live database).
 * @returns correct props to lock out users that are not premium.
 */
export async function getServerSideProps() {
  return {
    props: {
      protected: true,
      premium: true,
    },
  };
}

// //not sure if this page is being used .. workaround
// export async function getStaticPaths() {
//   return {
//     paths: [],
//     fallback: false,
//   };
// }

export default Home;
